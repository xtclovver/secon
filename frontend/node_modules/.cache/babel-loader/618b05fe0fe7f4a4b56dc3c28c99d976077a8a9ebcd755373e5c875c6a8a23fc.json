{"ast":null,"code":"import authApi from './auth'; // Импортируем настроенный экземпляр axios из auth.js\n\n/**\n * Получение лимита отпуска на указанный год\n * @param {number} year - Год\n * @returns {Promise<Object>} - Данные о лимите отпуска { totalDays, usedDays }\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getVacationLimit = async year => {\n  try {\n    const response = await authApi.get(`/vacations/limits/${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getVacationLimit:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить лимит отпуска.');\n  }\n};\n\n/**\n * Создание заявки на отпуск\n * @param {Object} request - Данные заявки { year, periods: [{ startDate, endDate, daysCount }], comment? }\n * @returns {Promise<Object>} - Созданная заявка с ID\n * @throws {Error} - В случае ошибки запроса\n */\nexport const createVacationRequest = async request => {\n  try {\n    const response = await authApi.post('/vacations/requests', request);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in createVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось создать заявку на отпуск.');\n  }\n};\n\n/**\n * Обновление заявки на отпуск (например, сохранение черновика)\n * @param {number} id - ID заявки\n * @param {Object} request - Обновленные данные заявки\n * @returns {Promise<Object>} - Обновленная заявка\n * @throws {Error} - В случае ошибки запроса\n */\nexport const updateVacationRequest = async (id, request) => {\n  try {\n    const response = await authApi.put(`/vacations/requests/${id}`, request);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in updateVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось обновить заявку на отпуск.');\n  }\n};\n\n/**\n * Отправка заявки на рассмотрение руководителю\n * @param {number} id - ID заявки\n * @returns {Promise<Object>} - Результат операции (например, { message: \"...\" })\n * @throws {Error} - В случае ошибки запроса\n */\nexport const submitVacationRequest = async id => {\n  try {\n    const response = await authApi.post(`/vacations/requests/${id}/submit`);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in submitVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось отправить заявку руководителю.');\n  }\n};\n\n/**\n * Получение собственных заявок на отпуск пользователя\n * @param {number} year - Год\n * @returns {Promise<Array>} - Список заявок пользователя\n * @param {number | null} [status] - Опциональный ID статуса для фильтрации\n * @returns {Promise<Array>} - Список заявок пользователя\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getMyVacations = async (year, status = null) => {\n  try {\n    const params = {\n      year\n    };\n    if (status !== null) {\n      params.status = status;\n    }\n    const response = await authApi.get('/vacations/my', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getMyVacations:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить список ваших заявок.');\n  }\n};\n\n/**\n * Получение заявок сотрудников подразделения (для руководителя)\n * @param {number} departmentId - ID подразделения\n * @param {number} year - Год\n * @param {number | null} [status] - Опциональный ID статуса для фильтрации\n * @returns {Promise<Array>} - Список заявок сотрудников подразделения\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getDepartmentVacations = async (departmentId, year, status = null) => {\n  try {\n    const params = {\n      year\n    };\n    if (status !== null) {\n      params.status = status;\n    }\n    // departmentId передается как параметр пути\n    const response = await authApi.get(`/vacations/department/${departmentId}`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getDepartmentVacations:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить заявки сотрудников подразделения.');\n  }\n};\n\n/**\n * Получение пересечений отпусков в подразделении (для руководителя)\n * @param {number} departmentId - ID подразделения\n * @param {number} year - Год\n * @returns {Promise<Array>} - Список пересечений\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getVacationIntersections = async (departmentId, year) => {\n  try {\n    const response = await authApi.get('/vacations/intersections', {\n      params: {\n        departmentId,\n        year\n      } // departmentId передается как query параметр\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getVacationIntersections:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить пересечения отпусков.');\n  }\n};\n\n/**\n * Получение списка статусов заявок\n * @returns {Promise<Array>} - Список статусов { id, name, description }\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getVacationStatuses = async () => {\n  try {\n    const response = await authApi.get('/vacations/statuses'); // Предполагаем такой эндпоинт\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getVacationStatuses:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить список статусов заявок.');\n  }\n};\n\n/**\n * Утверждение заявки на отпуск (для руководителя)\n * @param {number} id - ID заявки\n * @returns {Promise<Object>} - Результат операции\n * @throws {Error} - В случае ошибки запроса\n */\nexport const approveVacationRequest = async id => {\n  try {\n    // Эндпоинт подтвержден в main.go\n    const response = await authApi.post(`/vacations/requests/${id}/approve`);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in approveVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось утвердить заявку.');\n  }\n};\n\n/**\n * Отклонение заявки на отпуск (для руководителя)\n * @param {number} id - ID заявки\n * @param {string} reason - Причина отклонения\n * @returns {Promise<Object>} - Результат операции\n * @throws {Error} - В случае ошибки запроса\n */\nexport const rejectVacationRequest = async (id, reason = '') => {\n  // Делаем reason опциональным\n  try {\n    // Эндпоинт подтвержден в main.go\n    const response = await authApi.post(`/vacations/requests/${id}/reject`, {\n      reason\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in rejectVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось отклонить заявку.');\n  }\n};\n\n/**\n * Установка лимита отпуска для пользователя (для администратора)\n * @param {number} userId - ID пользователя\n * @param {number} year - Год\n * @param {number} totalDays - Новое количество дней отпуска\n * @returns {Promise<Object>} - Результат операции (например, { message: \"...\" })\n * @throws {Error} - В случае ошибки запроса\n */\nexport const setVacationLimit = async (userId, year, totalDays) => {\n  try {\n    const response = await authApi.post('/admin/vacation-limits', {\n      user_id: userId,\n      // Используем snake_case, как ожидает бэкенд\n      year: year,\n      total_days: totalDays\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in setVacationLimit:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось установить лимит отпуска.');\n  }\n};\n\n/**\n * Отмена заявки (для пользователя, если она еще не утверждена)\n * @param {number} id - ID заявки\n * @returns {Promise<Object>} - Результат операции\n * @throws {Error} - В случае ошибки запроса\n */\nexport const cancelVacationRequest = async id => {\n  try {\n    // Эндпоинт подтвержден в main.go\n    const response = await authApi.post(`/vacations/requests/${id}/cancel`);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in cancelVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось отменить заявку.');\n  }\n};\n\n/**\n * Получение всех заявок с фильтрами (для админа/менеджера)\n * @param {Object} filters - Объект с фильтрами { year?, status?, userId?, departmentId? }\n * @returns {Promise<Array>} - Список заявок в формате VacationRequestAdminView\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getAllVacations = async (filters = {}) => {\n  try {\n    // Убираем null/undefined значения из фильтров\n    const validFilters = {};\n    for (const key in filters) {\n      if (filters[key] !== null && filters[key] !== undefined) {\n        validFilters[key] = filters[key];\n      }\n    }\n    const response = await authApi.get('/vacations/all', {\n      params: validFilters\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getAllVacations:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить список всех заявок.');\n  }\n};","map":{"version":3,"names":["authApi","getVacationLimit","year","response","get","data","error","console","Error","createVacationRequest","request","post","updateVacationRequest","id","put","submitVacationRequest","getMyVacations","status","params","getDepartmentVacations","departmentId","getVacationIntersections","getVacationStatuses","approveVacationRequest","rejectVacationRequest","reason","setVacationLimit","userId","totalDays","user_id","total_days","cancelVacationRequest","getAllVacations","filters","validFilters","key","undefined"],"sources":["/Users/usedcvnt/Documents/IDEProjects/VSCProjects/1st/frontend/src/api/vacations.js"],"sourcesContent":["import authApi from './auth'; // Импортируем настроенный экземпляр axios из auth.js\n\n/**\n * Получение лимита отпуска на указанный год\n * @param {number} year - Год\n * @returns {Promise<Object>} - Данные о лимите отпуска { totalDays, usedDays }\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getVacationLimit = async (year) => {\n  try {\n    const response = await authApi.get(`/vacations/limits/${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getVacationLimit:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить лимит отпуска.');\n  }\n};\n\n/**\n * Создание заявки на отпуск\n * @param {Object} request - Данные заявки { year, periods: [{ startDate, endDate, daysCount }], comment? }\n * @returns {Promise<Object>} - Созданная заявка с ID\n * @throws {Error} - В случае ошибки запроса\n */\nexport const createVacationRequest = async (request) => {\n  try {\n    const response = await authApi.post('/vacations/requests', request);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in createVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось создать заявку на отпуск.');\n  }\n};\n\n/**\n * Обновление заявки на отпуск (например, сохранение черновика)\n * @param {number} id - ID заявки\n * @param {Object} request - Обновленные данные заявки\n * @returns {Promise<Object>} - Обновленная заявка\n * @throws {Error} - В случае ошибки запроса\n */\nexport const updateVacationRequest = async (id, request) => {\n  try {\n    const response = await authApi.put(`/vacations/requests/${id}`, request);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in updateVacationRequest:\", error);\n     if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось обновить заявку на отпуск.');\n  }\n};\n\n/**\n * Отправка заявки на рассмотрение руководителю\n * @param {number} id - ID заявки\n * @returns {Promise<Object>} - Результат операции (например, { message: \"...\" })\n * @throws {Error} - В случае ошибки запроса\n */\nexport const submitVacationRequest = async (id) => {\n  try {\n    const response = await authApi.post(`/vacations/requests/${id}/submit`);\n    return response.data;\n  } catch (error) {\n     console.error(\"API Error in submitVacationRequest:\", error);\n     if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось отправить заявку руководителю.');\n  }\n};\n\n/**\n * Получение собственных заявок на отпуск пользователя\n * @param {number} year - Год\n * @returns {Promise<Array>} - Список заявок пользователя\n * @param {number | null} [status] - Опциональный ID статуса для фильтрации\n * @returns {Promise<Array>} - Список заявок пользователя\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getMyVacations = async (year, status = null) => {\n  try {\n    const params = { year };\n    if (status !== null) {\n      params.status = status;\n    }\n    const response = await authApi.get('/vacations/my', { params });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getMyVacations:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить список ваших заявок.');\n  }\n};\n\n/**\n * Получение заявок сотрудников подразделения (для руководителя)\n * @param {number} departmentId - ID подразделения\n * @param {number} year - Год\n * @param {number | null} [status] - Опциональный ID статуса для фильтрации\n * @returns {Promise<Array>} - Список заявок сотрудников подразделения\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getDepartmentVacations = async (departmentId, year, status = null) => {\n  try {\n    const params = { year };\n    if (status !== null) {\n      params.status = status;\n    }\n    // departmentId передается как параметр пути\n    const response = await authApi.get(`/vacations/department/${departmentId}`, { params });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getDepartmentVacations:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить заявки сотрудников подразделения.');\n  }\n};\n\n/**\n * Получение пересечений отпусков в подразделении (для руководителя)\n * @param {number} departmentId - ID подразделения\n * @param {number} year - Год\n * @returns {Promise<Array>} - Список пересечений\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getVacationIntersections = async (departmentId, year) => {\n  try {\n    const response = await authApi.get('/vacations/intersections', {\n      params: { departmentId, year } // departmentId передается как query параметр\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getVacationIntersections:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить пересечения отпусков.');\n  }\n};\n\n/**\n * Получение списка статусов заявок\n * @returns {Promise<Array>} - Список статусов { id, name, description }\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getVacationStatuses = async () => {\n  try {\n    const response = await authApi.get('/vacations/statuses'); // Предполагаем такой эндпоинт\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getVacationStatuses:\", error);\n     if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить список статусов заявок.');\n  }\n};\n\n/**\n * Утверждение заявки на отпуск (для руководителя)\n * @param {number} id - ID заявки\n * @returns {Promise<Object>} - Результат операции\n * @throws {Error} - В случае ошибки запроса\n */\nexport const approveVacationRequest = async (id) => {\n  try {\n    // Эндпоинт подтвержден в main.go\n    const response = await authApi.post(`/vacations/requests/${id}/approve`);\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in approveVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось утвердить заявку.');\n  }\n};\n\n/**\n * Отклонение заявки на отпуск (для руководителя)\n * @param {number} id - ID заявки\n * @param {string} reason - Причина отклонения\n * @returns {Promise<Object>} - Результат операции\n * @throws {Error} - В случае ошибки запроса\n */\nexport const rejectVacationRequest = async (id, reason = '') => { // Делаем reason опциональным\n  try {\n    // Эндпоинт подтвержден в main.go\n    const response = await authApi.post(`/vacations/requests/${id}/reject`, { reason });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in rejectVacationRequest:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось отклонить заявку.');\n    }\n};\n\n/**\n * Установка лимита отпуска для пользователя (для администратора)\n * @param {number} userId - ID пользователя\n * @param {number} year - Год\n * @param {number} totalDays - Новое количество дней отпуска\n * @returns {Promise<Object>} - Результат операции (например, { message: \"...\" })\n * @throws {Error} - В случае ошибки запроса\n */\nexport const setVacationLimit = async (userId, year, totalDays) => {\n  try {\n    const response = await authApi.post('/admin/vacation-limits', { \n      user_id: userId, // Используем snake_case, как ожидает бэкенд\n      year: year,\n      total_days: totalDays \n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in setVacationLimit:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось установить лимит отпуска.');\n  }\n};\n\n/**\n * Отмена заявки (для пользователя, если она еще не утверждена)\n * @param {number} id - ID заявки\n * @returns {Promise<Object>} - Результат операции\n * @throws {Error} - В случае ошибки запроса\n */\nexport const cancelVacationRequest = async (id) => {\n    try {\n        // Эндпоинт подтвержден в main.go\n        const response = await authApi.post(`/vacations/requests/${id}/cancel`);\n        return response.data;\n    } catch (error) {\n        console.error(\"API Error in cancelVacationRequest:\", error);\n        if (error.response && error.response.data && error.response.data.error) {\n            throw new Error(error.response.data.error);\n        }\n        throw new Error('Не удалось отменить заявку.');\n    }\n};\n\n/**\n * Получение всех заявок с фильтрами (для админа/менеджера)\n * @param {Object} filters - Объект с фильтрами { year?, status?, userId?, departmentId? }\n * @returns {Promise<Array>} - Список заявок в формате VacationRequestAdminView\n * @throws {Error} - В случае ошибки запроса\n */\nexport const getAllVacations = async (filters = {}) => {\n  try {\n    // Убираем null/undefined значения из фильтров\n    const validFilters = {};\n    for (const key in filters) {\n      if (filters[key] !== null && filters[key] !== undefined) {\n        validFilters[key] = filters[key];\n      }\n    }\n    const response = await authApi.get('/vacations/all', { params: validFilters });\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error in getAllVacations:\", error);\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Не удалось получить список всех заявок.');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}