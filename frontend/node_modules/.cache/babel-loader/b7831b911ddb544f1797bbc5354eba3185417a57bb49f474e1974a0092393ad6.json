{"ast":null,"code":"var _jsxFileName = \"/Users/usedcvnt/Documents/IDEProjects/VSCProjects/1st/frontend/src/components/ProtectedRoute/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { isAuthenticated } from '../../api/auth'; // Импортируем функцию проверки аутентификации\nimport { useUser } from '../../context/UserContext'; // Импортируем хук пользователя\n\n/**\n * Компонент для защиты маршрутов, требующих аутентификации.\n * \n * Проверяет, аутентифицирован ли пользователь с помощью `isAuthenticated`.\n * Если нет, перенаправляет на страницу `/login`, сохраняя исходный путь\n * для возможного редиректа после успешного входа.\n * \n * Если пользователь аутентифицирован, отображает дочерние маршруты (`<Outlet />`).\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  allowedRoles\n}) => {\n  _s();\n  const location = useLocation();\n  const {\n    user\n  } = useUser();\n\n  // Логируем пользователя, которого видит ProtectedRoute\n  console.log(\"ProtectedRoute received user:\", user);\n  console.log(\"ProtectedRoute checking path:\", location.pathname);\n  console.log(\"Allowed roles:\", allowedRoles);\n\n  // Проверяем аутентификацию\n  if (!isAuthenticated() || !user) {\n    // Пользователь не вошел в систему или данные пользователя еще не загружены\n    // Перенаправляем на страницу логина, передавая текущий путь в state\n    // чтобы можно было вернуться сюда после логина\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Проверяем роли, если они указаны\n  if (allowedRoles && allowedRoles.length > 0) {\n    const userHasRequiredRole = allowedRoles.includes('admin') && user.isAdmin || allowedRoles.includes('manager') && user.isManager || allowedRoles.includes('user') && !user.isAdmin && !user.isManager; // Предполагаем, что 'user' - это обычный пользователь\n\n    if (!userHasRequiredRole) {\n      // У пользователя нет необходимой роли, перенаправляем на его дашборд или страницу ошибки доступа\n      console.warn(`Доступ запрещен: Пользователь ${user.username} не имеет роли из списка [${allowedRoles.join(', ')}] для доступа к ${location.pathname}`);\n      // Редирект на основной дашборд пользователя как fallback\n      const fallbackPath = user.isAdmin ? \"/admin/dashboard\" : user.isManager ? \"/manager/dashboard\" : \"/dashboard\";\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: fallbackPath,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this);\n      // Или можно редиректить на специальную страницу \"Доступ запрещен\"\n      // return <Navigate to=\"/unauthorized\" replace />; \n    }\n  }\n\n  // Если пользователь аутентифицирован и (если роли указаны) имеет нужную роль,\n  // отображаем запрошенный компонент/страницу\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n_s(ProtectedRoute, \"vaC53idXq2T/yEyxH1p67xsNlts=\", false, function () {\n  return [useLocation, useUser];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useLocation","isAuthenticated","useUser","jsxDEV","_jsxDEV","ProtectedRoute","allowedRoles","_s","location","user","console","log","pathname","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","length","userHasRequiredRole","includes","isAdmin","isManager","warn","username","join","fallbackPath","_c","$RefreshReg$"],"sources":["/Users/usedcvnt/Documents/IDEProjects/VSCProjects/1st/frontend/src/components/ProtectedRoute/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { isAuthenticated } from '../../api/auth'; // Импортируем функцию проверки аутентификации\nimport { useUser } from '../../context/UserContext'; // Импортируем хук пользователя\n\n/**\n * Компонент для защиты маршрутов, требующих аутентификации.\n * \n * Проверяет, аутентифицирован ли пользователь с помощью `isAuthenticated`.\n * Если нет, перенаправляет на страницу `/login`, сохраняя исходный путь\n * для возможного редиректа после успешного входа.\n * \n * Если пользователь аутентифицирован, отображает дочерние маршруты (`<Outlet />`).\n */\nconst ProtectedRoute = ({ allowedRoles }) => { \n  const location = useLocation();\n  const { user } = useUser(); \n\n  // Логируем пользователя, которого видит ProtectedRoute\n  console.log(\"ProtectedRoute received user:\", user); \n  console.log(\"ProtectedRoute checking path:\", location.pathname);\n  console.log(\"Allowed roles:\", allowedRoles);\n\n  // Проверяем аутентификацию\n  if (!isAuthenticated() || !user) {\n    // Пользователь не вошел в систему или данные пользователя еще не загружены\n    // Перенаправляем на страницу логина, передавая текущий путь в state\n    // чтобы можно было вернуться сюда после логина\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // Проверяем роли, если они указаны\n  if (allowedRoles && allowedRoles.length > 0) {\n    const userHasRequiredRole = \n        (allowedRoles.includes('admin') && user.isAdmin) ||\n        (allowedRoles.includes('manager') && user.isManager) ||\n        (allowedRoles.includes('user') && !user.isAdmin && !user.isManager); // Предполагаем, что 'user' - это обычный пользователь\n\n    if (!userHasRequiredRole) {\n      // У пользователя нет необходимой роли, перенаправляем на его дашборд или страницу ошибки доступа\n      console.warn(`Доступ запрещен: Пользователь ${user.username} не имеет роли из списка [${allowedRoles.join(', ')}] для доступа к ${location.pathname}`);\n      // Редирект на основной дашборд пользователя как fallback\n       const fallbackPath = user.isAdmin ? \"/admin/dashboard\" : user.isManager ? \"/manager/dashboard\" : \"/dashboard\";\n      return <Navigate to={fallbackPath} replace />;\n      // Или можно редиректить на специальную страницу \"Доступ запрещен\"\n      // return <Navigate to=\"/unauthorized\" replace />; \n    }\n  }\n\n  // Если пользователь аутентифицирован и (если роли указаны) имеет нужную роль,\n  // отображаем запрошенный компонент/страницу\n  return <Outlet />;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,eAAe,QAAQ,gBAAgB,CAAC,CAAC;AAClD,SAASC,OAAO,QAAQ,2BAA2B,CAAC,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAES;EAAK,CAAC,GAAGP,OAAO,CAAC,CAAC;;EAE1B;EACAQ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,IAAI,CAAC;EAClDC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEH,QAAQ,CAACI,QAAQ,CAAC;EAC/DF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,YAAY,CAAC;;EAE3C;EACA,IAAI,CAACL,eAAe,CAAC,CAAC,IAAI,CAACQ,IAAI,EAAE;IAC/B;IACA;IACA;IACA,oBAAOL,OAAA,CAACN,QAAQ;MAACe,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEP;MAAS,CAAE;MAACQ,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEA;EACA,IAAId,YAAY,IAAIA,YAAY,CAACe,MAAM,GAAG,CAAC,EAAE;IAC3C,MAAMC,mBAAmB,GACpBhB,YAAY,CAACiB,QAAQ,CAAC,OAAO,CAAC,IAAId,IAAI,CAACe,OAAO,IAC9ClB,YAAY,CAACiB,QAAQ,CAAC,SAAS,CAAC,IAAId,IAAI,CAACgB,SAAU,IACnDnB,YAAY,CAACiB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAACd,IAAI,CAACe,OAAO,IAAI,CAACf,IAAI,CAACgB,SAAU,CAAC,CAAC;;IAEzE,IAAI,CAACH,mBAAmB,EAAE;MACxB;MACAZ,OAAO,CAACgB,IAAI,CAAC,iCAAiCjB,IAAI,CAACkB,QAAQ,6BAA6BrB,YAAY,CAACsB,IAAI,CAAC,IAAI,CAAC,mBAAmBpB,QAAQ,CAACI,QAAQ,EAAE,CAAC;MACtJ;MACC,MAAMiB,YAAY,GAAGpB,IAAI,CAACe,OAAO,GAAG,kBAAkB,GAAGf,IAAI,CAACgB,SAAS,GAAG,oBAAoB,GAAG,YAAY;MAC9G,oBAAOrB,OAAA,CAACN,QAAQ;QAACe,EAAE,EAAEgB,YAAa;QAACb,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAC7C;MACA;IACF;EACF;;EAEA;EACA;EACA,oBAAOhB,OAAA,CAACL,MAAM;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnB,CAAC;AAACb,EAAA,CAtCIF,cAAc;EAAA,QACDL,WAAW,EACXE,OAAO;AAAA;AAAA4B,EAAA,GAFpBzB,cAAc;AAwCpB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}