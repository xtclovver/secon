{"ast":null,"code":"import axios from 'axios';\n\n// Получаем базовый URL API из переменных окружения или используем дефолтное значение\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Создаем экземпляр axios с базовым URL и настройками\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Добавляем interceptor для добавления токена авторизации к каждому запросу\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Получаем токен из localStorage\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\n * Получает список пользователей с их лимитами отпуска на указанный год.\n * Требует прав администратора.\n * @param {number} year - Год, за который нужно получить лимиты.\n * @returns {Promise<Array<object>>} - Промис, который разрешается массивом пользователей с лимитами.\n */\nexport const getUsersWithLimits = async year => {\n  try {\n    // Добавляем параметр year к запросу\n    const response = await apiClient.get(`/admin/users`, {\n      params: {\n        year\n      }\n    });\n    return response.data; // Возвращаем данные из ответа (массив UserWithLimitDTO)\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Ошибка при получении пользователей с лимитами:', error.response || error.message);\n    // Пробрасываем ошибку дальше, чтобы ее можно было обработать в компоненте\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Не удалось получить список пользователей');\n  }\n};\n\n// Можно добавить другие функции для работы с пользователями (CRUD и т.д.)\n// export const createUser = async (userData) => { ... };\n// export const updateUser = async (userId, userData) => { ... };\n// export const deleteUser = async (userId) => { ... };","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getUsersWithLimits","year","response","get","params","data","_error$response","_error$response$data","console","message","Error"],"sources":["/Users/usedcvnt/Documents/IDEProjects/VSCProjects/1st/frontend/src/api/users.js"],"sourcesContent":["import axios from 'axios';\n\n// Получаем базовый URL API из переменных окружения или используем дефолтное значение\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Создаем экземпляр axios с базовым URL и настройками\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Добавляем interceptor для добавления токена авторизации к каждому запросу\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token'); // Получаем токен из localStorage\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Получает список пользователей с их лимитами отпуска на указанный год.\n * Требует прав администратора.\n * @param {number} year - Год, за который нужно получить лимиты.\n * @returns {Promise<Array<object>>} - Промис, который разрешается массивом пользователей с лимитами.\n */\nexport const getUsersWithLimits = async (year) => {\n  try {\n    // Добавляем параметр year к запросу\n    const response = await apiClient.get(`/admin/users`, { params: { year } });\n    return response.data; // Возвращаем данные из ответа (массив UserWithLimitDTO)\n  } catch (error) {\n    console.error('Ошибка при получении пользователей с лимитами:', error.response || error.message);\n    // Пробрасываем ошибку дальше, чтобы ее можно было обработать в компоненте\n    throw new Error(error.response?.data?.error || 'Не удалось получить список пользователей');\n  }\n};\n\n// Можно добавить другие функции для работы с пользователями (CRUD и т.д.)\n// export const createUser = async (userData) => { ... };\n// export const updateUser = async (userId, userData) => { ... };\n// export const deleteUser = async (userId) => { ... };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAOC,IAAI,IAAK;EAChD,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMjB,SAAS,CAACkB,GAAG,CAAC,cAAc,EAAE;MAAEC,MAAM,EAAE;QAAEH;MAAK;IAAE,CAAC,CAAC;IAC1E,OAAOC,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA,IAAAS,eAAA,EAAAC,oBAAA;IACdC,OAAO,CAACX,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAACK,QAAQ,IAAIL,KAAK,CAACY,OAAO,CAAC;IAChG;IACA,MAAM,IAAIC,KAAK,CAAC,EAAAJ,eAAA,GAAAT,KAAK,CAACK,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBD,IAAI,cAAAE,oBAAA,uBAApBA,oBAAA,CAAsBV,KAAK,KAAI,0CAA0C,CAAC;EAC5F;AACF,CAAC;;AAED;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}