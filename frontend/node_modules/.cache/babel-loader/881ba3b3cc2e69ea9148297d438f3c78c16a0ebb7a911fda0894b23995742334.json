{"ast":null,"code":"import axios from 'axios';\n\n// Получаем базовый URL API из переменных окружения или используем дефолтный\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Создание экземпляра axios с базовым URL\nconst authApi = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик для добавления токена к запросам\nauthApi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Перехватчик для обработки ошибок ответа\nauthApi.interceptors.response.use(response => response, error => {\n  // Обработка 401 Unauthorized (например, истекший токен)\n  if (error.response && error.response.status === 401) {\n    // Удаляем старый токен и данные пользователя\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Перенаправляем на страницу логина, если мы не на ней\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n  // Возвращаем ошибку для дальнейшей обработки\n  return Promise.reject(error);\n});\n\n/**\n * Авторизация пользователя\n * @param {string} username - Имя пользователя\n * @param {string} password - Пароль\n * @returns {Promise<Object>} - Объект с данными пользователя и токеном\n */\nexport const login = async (username, password) => {\n  try {\n    const response = await authApi.post('/auth/login', {\n      username,\n      password\n    });\n    // Сохраняем токен и данные пользователя в localStorage при успешном входе\n    if (response.data && response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    if (response.data && response.data.user) {\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  } catch (error) {\n    // Обработка ошибок от сервера\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    } else if (error.request) {\n      // Ошибка сети или сервер недоступен\n      throw new Error('Не удалось подключиться к серверу. Проверьте ваше соединение.');\n    } else {\n      // Другие ошибки\n      throw new Error('Произошла неизвестная ошибка при входе.');\n    }\n  }\n};\n\n/**\n * Выход из системы\n */\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  // Перенаправляем на страницу логина\n  window.location.href = '/login';\n};\n\n/**\n * Получение информации о текущем пользователе (если есть токен)\n * @returns {Promise<Object|null>} - Объект с данными пользователя или null\n */\nexport const getCurrentUser = async () => {\n  // Проверяем наличие токена перед запросом\n  if (!isAuthenticated()) {\n    return null;\n  }\n  try {\n    const response = await authApi.get('/auth/me'); // Предполагаем, что есть такой эндпоинт\n    // Обновляем данные пользователя в localStorage\n    if (response.data) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    // Не бросаем ошибку, если это 401 (токен невалиден), просто возвращаем null\n    if (error.response && error.response.status !== 401) {\n      console.error('Ошибка получения данных пользователя:', error);\n      // Можно выбросить ошибку для других статусов, если нужно\n      // throw new Error(error.response?.data?.error || 'Ошибка получения данных пользователя');\n    }\n    // Если токен невалиден или другая ошибка, считаем пользователя неавторизованным\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    return null;\n  }\n};\n\n/**\n * Проверка наличия валидного токена в localStorage\n * @returns {boolean} - true, если токен есть\n */\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n  // В более сложном случае можно проверять срок действия токена\n};\n\n// Экспорт экземпляра axios для возможного использования в других API-клиентах\nexport default authApi;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","authApi","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","pathname","href","login","username","password","post","data","setItem","user","JSON","stringify","Error","logout","getCurrentUser","isAuthenticated","get","console"],"sources":["/Users/usedcvnt/Documents/IDEProjects/VSCProjects/1st/frontend/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\n\n// Получаем базовый URL API из переменных окружения или используем дефолтный\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Создание экземпляра axios с базовым URL\nconst authApi = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик для добавления токена к запросам\nauthApi.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n// Перехватчик для обработки ошибок ответа\nauthApi.interceptors.response.use(\n  response => response,\n  error => {\n    // Обработка 401 Unauthorized (например, истекший токен)\n    if (error.response && error.response.status === 401) {\n      // Удаляем старый токен и данные пользователя\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      // Перенаправляем на страницу логина, если мы не на ней\n      if (window.location.pathname !== '/login') {\n         window.location.href = '/login';\n      }\n    }\n    // Возвращаем ошибку для дальнейшей обработки\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Авторизация пользователя\n * @param {string} username - Имя пользователя\n * @param {string} password - Пароль\n * @returns {Promise<Object>} - Объект с данными пользователя и токеном\n */\nexport const login = async (username, password) => {\n  try {\n    const response = await authApi.post('/auth/login', { username, password });\n    // Сохраняем токен и данные пользователя в localStorage при успешном входе\n    if (response.data && response.data.token) {\n        localStorage.setItem('token', response.data.token);\n    }\n     if (response.data && response.data.user) {\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  } catch (error) {\n    // Обработка ошибок от сервера\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    } else if (error.request) {\n      // Ошибка сети или сервер недоступен\n      throw new Error('Не удалось подключиться к серверу. Проверьте ваше соединение.');\n    } else {\n      // Другие ошибки\n      throw new Error('Произошла неизвестная ошибка при входе.');\n    }\n  }\n};\n\n/**\n * Выход из системы\n */\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  // Перенаправляем на страницу логина\n  window.location.href = '/login';\n};\n\n/**\n * Получение информации о текущем пользователе (если есть токен)\n * @returns {Promise<Object|null>} - Объект с данными пользователя или null\n */\nexport const getCurrentUser = async () => {\n  // Проверяем наличие токена перед запросом\n  if (!isAuthenticated()) {\n    return null;\n  }\n  \n  try {\n    const response = await authApi.get('/auth/me'); // Предполагаем, что есть такой эндпоинт\n    // Обновляем данные пользователя в localStorage\n    if (response.data) {\n       localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    // Не бросаем ошибку, если это 401 (токен невалиден), просто возвращаем null\n    if (error.response && error.response.status !== 401) {\n      console.error('Ошибка получения данных пользователя:', error);\n      // Можно выбросить ошибку для других статусов, если нужно\n      // throw new Error(error.response?.data?.error || 'Ошибка получения данных пользователя');\n    }\n    // Если токен невалиден или другая ошибка, считаем пользователя неавторизованным\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    return null;\n  }\n};\n\n/**\n * Проверка наличия валидного токена в localStorage\n * @returns {boolean} - true, если токен есть\n */\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n  // В более сложном случае можно проверять срок действия токена\n};\n\n// Экспорт экземпляра axios для возможного использования в других API-клиентах\nexport default authApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}