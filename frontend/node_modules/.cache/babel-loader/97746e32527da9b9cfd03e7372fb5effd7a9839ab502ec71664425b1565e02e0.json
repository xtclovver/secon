{"ast":null,"code":"var _jsxFileName = \"/Users/usedcvnt/Documents/IDEProjects/VSCProjects/1st/frontend/src/context/UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\n\n// Создание контекста пользователя\n// Инициализируем с null, так как начальное состояние пользователя неизвестно\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({\n  user: null,\n  setUser: () => {} // Пустая функция-заглушка для обновления пользователя\n});\n\n// Провайдер контекста пользователя\n// Он будет получать user и setUser из App.js через пропс value\nexport const UserProvider = ({\n  children,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для удобного использования контекста пользователя в компонентах\n_c = UserProvider;\nexport const useUser = () => {\n  _s();\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    // Эта ошибка поможет отловить использование хука вне провайдера\n    throw new Error('useUser должен использоваться внутри UserProvider');\n  }\n  return context; // Возвращает { user, setUser }\n};\n\n// Экспорт по умолчанию для возможного импорта без фигурных скобок\n_s(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","jsxDEV","_jsxDEV","UserContext","user","setUser","UserProvider","children","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s","context","undefined","Error","$RefreshReg$"],"sources":["/Users/usedcvnt/Documents/IDEProjects/VSCProjects/1st/frontend/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\n\n// Создание контекста пользователя\n// Инициализируем с null, так как начальное состояние пользователя неизвестно\nexport const UserContext = createContext({\n  user: null,\n  setUser: () => {} // Пустая функция-заглушка для обновления пользователя\n});\n\n// Провайдер контекста пользователя\n// Он будет получать user и setUser из App.js через пропс value\nexport const UserProvider = ({ children, value }) => {\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n// Хук для удобного использования контекста пользователя в компонентах\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    // Эта ошибка поможет отловить использование хука вне провайдера\n    throw new Error('useUser должен использоваться внутри UserProvider');\n  }\n  return context; // Возвращает { user, setUser }\n};\n\n// Экспорт по умолчанию для возможного импорта без фигурных скобок\nexport default UserContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;;AAExD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC;EACvCK,IAAI,EAAE,IAAI;EACVC,OAAO,EAAEA,CAAA,KAAM,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAM,CAAC,KAAK;EACnD,oBACEN,OAAA,CAACC,WAAW,CAACM,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAD,QAAA,EAChCA;EAAQ;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAC,EAAA,GARaR,YAAY;AASzB,OAAO,MAAMS,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGjB,UAAU,CAACG,WAAW,CAAC;EACvC,IAAIc,OAAO,KAAKC,SAAS,EAAE;IACzB;IACA,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACtE;EACA,OAAOF,OAAO,CAAC,CAAC;AAClB,CAAC;;AAED;AAAAD,EAAA,CATaD,OAAO;AAUpB,eAAeZ,WAAW;AAAC,IAAAW,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}